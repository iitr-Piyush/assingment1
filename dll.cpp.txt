#include <iostream>
using namespace std;

template <class T>
class DLList
{
    struct Node
    {
        T data;
        Node *prev;
        Node *next;
    };
    Node *head;
    Node *tail;

public:
    DLList()
    {
        head = NULL;
        tail = NULL;
    }

    void Insertion(T Value, int Loc)
{
    Node *temp = new Node();
    temp->data = Value;
    temp->prev = NULL;
    temp->next = NULL;

    if (Loc < -1)
    {
        cout << "Invalid position" << endl;
        return;
    }

    if (head == NULL)  // Empty list
    {
        head = temp;
        tail = temp;
    }
    else if (Loc == 1) // Insert at head
    {
        temp->next = head;
        head->prev = temp;
        head = temp;
    }
    else if (Loc == -1) // Insert at tail
    {
        temp->prev = tail;
        tail->next = temp;
        tail = temp;
    }
    else
    {
        Node *temp1 = head;
        for (int i = 1; i < Loc - 1; i++)
        {
            if (temp1 != NULL)
            {
                temp1 = temp1->next;
            }
            else
            {
                cout << "Invalid position" << endl;
                return;
            }
        }

        if (temp1 != NULL)
        {
            temp->next = temp1->next;
            temp->prev = temp1;
            if (temp1->next != NULL)
            {
                temp1->next->prev = temp;
            }
            temp1->next = temp;
            if (temp1 == tail)
            {
                tail = temp;
            }
        }
        else
        {
            cout << "Invalid position" << endl;
        }
    }
}

    void DeleteItemAt(int Pos)
    {
        if (Pos <= 0 || head == NULL)
        {
            cout << "Invalid position or empty list" << endl;
            return;
        }

        if (Pos == 1)
        {
            Node *temp = head;
            head = head->next;
            if (head != NULL)
            {
                head->prev = NULL;
            }
            delete temp;
        }
        else
        {
            Node *temp = head;
            for (int i = 1; i < Pos - 1; i++)
            {
                if (temp != NULL)
                {
                    temp = temp->next;
                }
                else
                {
                    cout << "Invalid position" << endl;
                    return;
                }
            }

            if (temp != NULL && temp->next != NULL)
            {
                Node *temp2 = temp->next;
                temp->next = temp2->next;
                if (temp2->next != NULL)
                {
                    temp2->next->prev = temp;
                }
                if (temp2 == tail)
                {
                    tail = temp;
                }
                delete temp2;
            }
            else
            {
                cout << "Invalid position" << endl;
            }
        }
    }

    int count()
    {
        Node *current = head;
        int c = 0;
        while (current != NULL)
        {
            c++;
            current = current->next;
        }
        return c;
    }

    int Searching(T Value)
    {
        Node *temp = head;
        int count = 0;
        while (temp != NULL)
        {
            count++;
            if (temp->data == Value)
            {
                return count;
            }
            temp = temp->next;
        }
        return -1; // Item not found
    }

    void display()
    {
        Node *temp = head;
        cout << "List of elements are: ";
        while (temp != NULL)
        {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};

int main()
{
    DLList<char> L1;
    int choice, pos;
    char value;

    do
    {
        cout << "\n1. Insert an item\n2. Delete an item\n3. Display linked list\n4. Search an item\n0. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice)
        {
        case 1:
            cout << "Enter the value to insert: ";
            cin >> value;
            cout << "Enter the position to insert at: ";
            cin >> pos;
            L1.Insertion(value, pos);
            break;

        case 2:
            cout << "Enter the position to delete: ";
            cin >> pos;
            L1.DeleteItemAt(pos);
            break;

        case 3:
            L1.display();
            break;

        case 4:
            cout << "Enter the value to search: ";
            cin >> value;
            pos = L1.Searching(value);
            if (pos != -1)
            {
                cout << "Item found at Position: " << pos << endl;
            }
            else
            {
                cout << "Item not found" << endl;
            }
            break;

        case 0:
            cout << "Exiting program." << endl;
            break;

        default:
            cout << "Invalid choice. Try again." << endl;
            break;
        }
    } while (choice != 0);

    return 0;
}
